/* 
  d3resources.strings
  StreamGraph

  Created by Ian Brown on 6/16/13.
  Copyright (c) 2013 Ian Brown. All rights reserved.
*/

"header" = "<!DOCTYPE html>
<html>
<meta charset=\"utf-8\">
<title>Streamgraph</title>
<head>
<style>

body {
    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;
    margin: auto;
    position: relative;
}


.grid path {
    stroke-width: 1;
}

.chart rect {
    fill: steelblue;
}

.chart text {
    fill: black;
    font: 10px gotham, sans-serif;
    text-anchor: end;
}
.x text {
	font: 4px gotham, sans-serif;
}

.y text {
	font: 10px gotham, sans-serif;
}

.axis text {
    font: gotham, sans-serif;
}

.axis path,
.axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
}


</style>";

"section0" = "

</head>
<body bgcolor=\"";



"section01" = "\" onresize=\"location.reload();\">

<script>


";



"section1" = "

layers1=stack(  data.map(function(foo) { return foo.map(function(d, i) { return {x: i, y: Math.max(0, d)}; });   })  );

var width = document.width,
height = document.height;

var x = d3.scale.linear()
.domain([0, m - 1])
.range([0, width]);

var y = d3.scale.linear()
.domain([0, d3.max(layers1, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); })])
.range([height, 0]);
";




"section2" = "var color = d3.scale.ordinal()
.range(colors);


var area = d3.svg.area()
.x(function(d) { return x(d.x); })
.y0(function(d) { return y(d.y0); })
.y1(function(d) { return y(d.y0 + d.y); });

var svg = d3.select(\"body\").append(\"svg\")
.attr(\"width\", width)
.attr(\"height\", height);

var colorx=0;


svg.selectAll(\"path\")
.data(layers1)
.enter().append(\"path\")
.attr(\"d\", area)
.style(\"fill\", function() { return color(colorx+=100) });";



"section3" = "</script>
</body>
</html>";




"barGraphDataTransformationJS" = "var totals = [];
var cols = [];


for (var i=0;i<my_x_axis.length;i++)
{
	var total=0;
	var col = new Object();
	col.ents=new Array();
	
	for (var j=0; j<categories.length;j++) {
		var entry = new Object();
		if (j==0) {
			entry.y0=0;
			entry.y1=data[j][i];
		} else {
			entry.y0=total;
			entry.y1=data[j][i] +total;
		}
		entry.name=categories[i];
		entry.id=j;
        
		col.ents[j]=entry;
        total+=data[j][i];

    }
	totals[i]=total;
	cols[i]=col;
	
}";


"barGraphLayoutJS001" = "var margin = {top: 20, right: 30, bottom: 30, left: 40},
width = document.width - margin.left - margin.right,
height = document.height - margin.top - margin.bottom;


var y = d3.scale.linear()
.range([height, 0]);

var chart = d3.select(\".chart\")
.attr(\"width\", width + margin.left + margin.right)
.attr(\"height\", height + margin.top + margin.bottom).append(\"g\")
.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");

y.domain([0, d3.max(totals) ]);
";






"barGraphLayoutJS002" = "var bar = chart.selectAll(\"g\")
.data(cols)
.enter().append(\"g\")
.attr(\"transform\", function(d, i) { return \"translate(\" + x(i) + \",0)\"; });

bar.selectAll(\"rect\").data( function(d) { return d.ents; } ).enter().append(\"rect\")
.attr(\"y\", function(d) { return y(d.y1); })
.attr(\"height\", function(d) {  return y(d.y0) - y(d.y1); })
.attr(\"width\", x.rangeBand()) // stays
.style(\"fill\",  function(d) { return color(d.id); });


var yAxis = d3.svg.axis()
.scale(y)
.orient(\"left\");

var xAxis = d3.svg.axis()
.scale(z)
.orient(\"bottom\");

chart.append(\"g\")
.attr(\"class\", \"x axis\")
.attr(\"transform\", \"translate(0,\" + height  + \")\")
.call(xAxis);


chart.append(\"g\")
.attr(\"class\", \"y axis\")
.call(yAxis);
";
